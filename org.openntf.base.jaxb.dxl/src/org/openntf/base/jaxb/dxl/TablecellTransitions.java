//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.23 at 02:06:11 PM CET 
//


package org.openntf.base.jaxb.dxl;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tablecell.transitions.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="tablecell.transitions">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="none"/>
 *     &lt;enumeration value="rolling"/>
 *     &lt;enumeration value="lefttoright"/>
 *     &lt;enumeration value="toptobottom"/>
 *     &lt;enumeration value="wipe"/>
 *     &lt;enumeration value="boxes"/>
 *     &lt;enumeration value="explode"/>
 *     &lt;enumeration value="dissolve"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "tablecell.transitions", namespace = "http://www.lotus.com/dxl")
@XmlEnum
public enum TablecellTransitions {

    @XmlEnumValue("none")
    NONE("none"),
    @XmlEnumValue("rolling")
    ROLLING("rolling"),
    @XmlEnumValue("lefttoright")
    LEFTTORIGHT("lefttoright"),
    @XmlEnumValue("toptobottom")
    TOPTOBOTTOM("toptobottom"),
    @XmlEnumValue("wipe")
    WIPE("wipe"),
    @XmlEnumValue("boxes")
    BOXES("boxes"),
    @XmlEnumValue("explode")
    EXPLODE("explode"),
    @XmlEnumValue("dissolve")
    DISSOLVE("dissolve");
    private final String value;

    TablecellTransitions(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TablecellTransitions fromValue(String v) {
        for (TablecellTransitions c: TablecellTransitions.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
